{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Slider from '../Slider';\nimport VolumeLevel from './VolumeLevel';\nvar propTypes = {\n  actions: PropTypes.object,\n  player: PropTypes.object,\n  className: PropTypes.string,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n};\n\nvar VolumeBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VolumeBar, _Component);\n\n  function VolumeBar(props, context) {\n    var _this;\n\n    _classCallCheck(this, VolumeBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VolumeBar).call(this, props, context));\n    _this.state = {\n      percentage: '0%'\n    };\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handlePercentageChange = _this.handlePercentageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkMuted = _this.checkMuted.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getPercent = _this.getPercent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stepForward = _this.stepForward.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stepBack = _this.stepBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VolumeBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"getPercent\",\n    value: function getPercent() {\n      var player = this.props.player;\n\n      if (player.muted) {\n        return 0;\n      }\n\n      return player.volume;\n    }\n  }, {\n    key: \"checkMuted\",\n    value: function checkMuted() {\n      var _this$props = this.props,\n          player = _this$props.player,\n          actions = _this$props.actions;\n\n      if (player.muted) {\n        actions.mute(false);\n      }\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      var actions = this.props.actions;\n      this.checkMuted();\n      var distance = this.slider.calculateDistance(event);\n      actions.changeVolume(distance);\n    }\n  }, {\n    key: \"stepForward\",\n    value: function stepForward() {\n      var _this$props2 = this.props,\n          player = _this$props2.player,\n          actions = _this$props2.actions;\n      this.checkMuted();\n      actions.changeVolume(player.volume + 0.1);\n    }\n  }, {\n    key: \"stepBack\",\n    value: function stepBack() {\n      var _this$props3 = this.props,\n          player = _this$props3.player,\n          actions = _this$props3.actions;\n      this.checkMuted();\n      actions.changeVolume(player.volume - 0.1);\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(e) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n    }\n  }, {\n    key: \"handlePercentageChange\",\n    value: function handlePercentageChange(percentage) {\n      if (percentage !== this.state.percentage) {\n        this.setState({\n          percentage: percentage\n        });\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      event.stopPropagation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          player = _this$props4.player,\n          className = _this$props4.className;\n      var volume = (player.volume * 100).toFixed(2);\n      return React.createElement(Slider, _extends({\n        ref: function ref(c) {\n          _this2.slider = c;\n        },\n        label: \"volume level\",\n        valuenow: volume,\n        valuetext: \"\".concat(volume, \"%\"),\n        onMouseMove: this.handleMouseMove,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onClick: this.handleClick,\n        sliderActive: this.handleFocus,\n        sliderInactive: this.handleBlur,\n        getPercent: this.getPercent,\n        onPercentageChange: this.handlePercentageChange,\n        stepForward: this.stepForward,\n        stepBack: this.stepBack\n      }, this.props, {\n        className: classNames(className, 'video-react-volume-bar video-react-slider-bar')\n      }), React.createElement(VolumeLevel, this.props));\n    }\n  }]);\n\n  return VolumeBar;\n}(Component);\n\nVolumeBar.propTypes = propTypes;\nVolumeBar.displayName = 'VolumeBar';\nexport default VolumeBar;","map":null,"metadata":{},"sourceType":"module"}