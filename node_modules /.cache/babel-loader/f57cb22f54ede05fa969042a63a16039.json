{"ast":null,"code":"import fullscreen from '../utils/fullscreen';\nexport var OPERATE = 'video-react/OPERATE';\nexport var FULLSCREEN_CHANGE = 'video-react/FULLSCREEN_CHANGE';\nexport var PLAYER_ACTIVATE = 'video-react/PLAYER_ACTIVATE';\nexport var USER_ACTIVATE = 'video-react/USER_ACTIVATE';\nexport function handleFullscreenChange(isFullscreen) {\n  return {\n    type: FULLSCREEN_CHANGE,\n    isFullscreen: isFullscreen\n  };\n}\nexport function activate(activity) {\n  return {\n    type: PLAYER_ACTIVATE,\n    activity: activity\n  };\n}\nexport function userActivate(activity) {\n  return {\n    type: USER_ACTIVATE,\n    activity: activity\n  };\n}\nexport function play() {\n  var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    action: 'play',\n    source: ''\n  };\n  this.video.play();\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function pause() {\n  var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    action: 'pause',\n    source: ''\n  };\n  this.video.pause();\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function togglePlay() {\n  var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    action: 'toggle-play',\n    source: ''\n  };\n  this.video.togglePlay();\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n} // seek video by time\n\nexport function seek(time) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: 'seek',\n    source: ''\n  };\n  this.video.seek(time);\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n} // jump forward x seconds\n\nexport function forward(seconds) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: \"forward-\".concat(seconds),\n    source: ''\n  };\n  this.video.forward(seconds);\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n} // jump back x seconds\n\nexport function replay(seconds) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: \"replay-\".concat(seconds),\n    source: ''\n  };\n  this.video.replay(seconds);\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function changeRate(rate) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: 'change-rate',\n    source: ''\n  };\n  this.video.playbackRate = rate;\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function changeVolume(volume) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: 'change-volume',\n    source: ''\n  };\n  var v = volume;\n\n  if (volume < 0) {\n    v = 0;\n  }\n\n  if (volume > 1) {\n    v = 1;\n  }\n\n  this.video.volume = v;\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function mute(muted) {\n  var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    action: muted ? 'muted' : 'unmuted',\n    source: ''\n  };\n  this.video.muted = muted;\n  return {\n    type: OPERATE,\n    operation: operation\n  };\n}\nexport function toggleFullscreen(player) {\n  if (fullscreen.enabled) {\n    if (fullscreen.isFullscreen) {\n      fullscreen.exit();\n    } else {\n      fullscreen.request(this.rootElement);\n    }\n\n    return {\n      type: OPERATE,\n      operation: {\n        action: 'toggle-fullscreen',\n        source: ''\n      }\n    };\n  }\n\n  return {\n    type: FULLSCREEN_CHANGE,\n    isFullscreen: !player.isFullscreen\n  };\n}","map":null,"metadata":{},"sourceType":"module"}