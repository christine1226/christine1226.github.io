{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nvar propTypes = {\n  duration: PropTypes.number,\n  buffered: PropTypes.object,\n  className: PropTypes.string\n}; // Shows load progress\n\nexport default function LoadProgressBar(_ref) {\n  var buffered = _ref.buffered,\n      duration = _ref.duration,\n      className = _ref.className;\n\n  if (!buffered || !buffered.length) {\n    return null;\n  }\n\n  var bufferedEnd = buffered.end(buffered.length - 1);\n  var style = {};\n\n  if (bufferedEnd > duration) {\n    bufferedEnd = duration;\n  } // get the percent width of a time compared to the total end\n\n\n  function percentify(time, end) {\n    var percent = time / end || 0; // no NaN\n\n    return \"\".concat((percent >= 1 ? 1 : percent) * 100, \"%\");\n  } // the width of the progress bar\n\n\n  style.width = percentify(bufferedEnd, duration);\n  var parts = []; // add child elements to represent the individual buffered time ranges\n\n  for (var i = 0; i < buffered.length; i++) {\n    var start = buffered.start(i);\n    var end = buffered.end(i); // set the percent based on the width of the progress bar (bufferedEnd)\n\n    var part = React.createElement(\"div\", {\n      style: {\n        left: percentify(start, bufferedEnd),\n        width: percentify(end - start, bufferedEnd)\n      },\n      key: \"part-\".concat(i)\n    });\n    parts.push(part);\n  }\n\n  if (parts.length === 0) {\n    parts = null;\n  }\n\n  return React.createElement(\"div\", {\n    style: style,\n    className: classNames('video-react-load-progress', className)\n  }, React.createElement(\"span\", {\n    className: \"video-react-control-text\"\n  }, \"Loaded: 0%\"), parts);\n}\nLoadProgressBar.propTypes = propTypes;\nLoadProgressBar.displayName = 'LoadProgressBar';","map":null,"metadata":{},"sourceType":"module"}