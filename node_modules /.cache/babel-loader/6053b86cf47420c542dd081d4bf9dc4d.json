{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Slider from '../Slider';\nimport PlayProgressBar from './PlayProgressBar';\nimport LoadProgressBar from './LoadProgressBar';\nimport MouseTimeDisplay from './MouseTimeDisplay';\nimport { formatTime } from '../../utils';\nvar propTypes = {\n  player: PropTypes.object,\n  mouseTime: PropTypes.object,\n  actions: PropTypes.object,\n  className: PropTypes.string\n};\n\nvar SeekBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SeekBar, _Component);\n\n  function SeekBar(props, context) {\n    var _this;\n\n    _classCallCheck(this, SeekBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SeekBar).call(this, props, context));\n    _this.getPercent = _this.getPercent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getNewTime = _this.getNewTime.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stepForward = _this.stepForward.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stepBack = _this.stepBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleMouseUp = _this.handleMouseUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SeekBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n    /**\n     * Get percentage of video played\n     *\n     * @return {Number} Percentage played\n     * @method getPercent\n     */\n\n  }, {\n    key: \"getPercent\",\n    value: function getPercent() {\n      var _this$props$player = this.props.player,\n          currentTime = _this$props$player.currentTime,\n          seekingTime = _this$props$player.seekingTime,\n          duration = _this$props$player.duration;\n      var time = seekingTime || currentTime;\n      var percent = time / duration;\n      return percent >= 1 ? 1 : percent;\n    }\n  }, {\n    key: \"getNewTime\",\n    value: function getNewTime(event) {\n      var duration = this.props.player.duration;\n      var distance = this.slider.calculateDistance(event);\n      var newTime = distance * duration; // Don't let video end while scrubbing.\n\n      return newTime === duration ? newTime - 0.1 : newTime;\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown() {}\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(event) {\n      var actions = this.props.actions;\n      var newTime = this.getNewTime(event); // Set new time (tell video to seek to new time)\n\n      actions.seek(newTime);\n      actions.handleEndSeeking(newTime);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(event) {\n      var actions = this.props.actions;\n      var newTime = this.getNewTime(event);\n      actions.handleSeekingTime(newTime);\n    }\n  }, {\n    key: \"stepForward\",\n    value: function stepForward() {\n      var actions = this.props.actions;\n      actions.forward(5);\n    }\n  }, {\n    key: \"stepBack\",\n    value: function stepBack() {\n      var actions = this.props.actions;\n      actions.replay(5);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _this$props$player2 = _this$props.player,\n          currentTime = _this$props$player2.currentTime,\n          seekingTime = _this$props$player2.seekingTime,\n          duration = _this$props$player2.duration,\n          buffered = _this$props$player2.buffered,\n          mouseTime = _this$props.mouseTime;\n      var time = seekingTime || currentTime;\n      return React.createElement(Slider, {\n        ref: function ref(input) {\n          _this2.slider = input;\n        },\n        label: \"video progress bar\",\n        className: classNames('video-react-progress-holder', this.props.className),\n        valuenow: (this.getPercent() * 100).toFixed(2),\n        valuetext: formatTime(time, duration),\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        onMouseUp: this.handleMouseUp,\n        getPercent: this.getPercent,\n        stepForward: this.stepForward,\n        stepBack: this.stepBack\n      }, React.createElement(LoadProgressBar, {\n        buffered: buffered,\n        currentTime: time,\n        duration: duration\n      }), React.createElement(MouseTimeDisplay, {\n        duration: duration,\n        mouseTime: mouseTime\n      }), React.createElement(PlayProgressBar, {\n        currentTime: time,\n        duration: duration\n      }));\n    }\n  }]);\n\n  return SeekBar;\n}(Component);\n\nexport { SeekBar as default };\nSeekBar.propTypes = propTypes;\nSeekBar.displayName = 'SeekBar';","map":null,"metadata":{},"sourceType":"module"}