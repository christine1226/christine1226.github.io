{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { LOAD_START, CAN_PLAY, WAITING, CAN_PLAY_THROUGH, PLAYING, PLAY, PAUSE, END, SEEKING, SEEKED, SEEKING_TIME, END_SEEKING, DURATION_CHANGE, TIME_UPDATE, VOLUME_CHANGE, PROGRESS_CHANGE, RATE_CHANGE, SUSPEND, ABORT, EMPTIED, STALLED, LOADED_META_DATA, LOADED_DATA, RESIZE, ERROR } from '../actions/video';\nimport { FULLSCREEN_CHANGE, PLAYER_ACTIVATE, USER_ACTIVATE } from '../actions/player';\nvar initialState = {\n  currentSrc: null,\n  duration: 0,\n  currentTime: 0,\n  seekingTime: 0,\n  buffered: null,\n  waiting: false,\n  seeking: false,\n  paused: true,\n  autoPaused: false,\n  ended: false,\n  playbackRate: 1,\n  muted: false,\n  volume: 1,\n  readyState: 0,\n  networkState: 0,\n  videoWidth: 0,\n  videoHeight: 0,\n  hasStarted: false,\n  userActivity: true,\n  isActive: false,\n  isFullscreen: false\n};\nexport default function player() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case USER_ACTIVATE:\n      return _objectSpread({}, state, {\n        userActivity: action.activity\n      });\n\n    case PLAYER_ACTIVATE:\n      return _objectSpread({}, state, {\n        isActive: action.activity\n      });\n\n    case FULLSCREEN_CHANGE:\n      return _objectSpread({}, state, {\n        isFullscreen: !!action.isFullscreen\n      });\n\n    case SEEKING_TIME:\n      return _objectSpread({}, state, {\n        seekingTime: action.time\n      });\n\n    case END_SEEKING:\n      return _objectSpread({}, state, {\n        seekingTime: 0\n      });\n\n    case LOAD_START:\n      return _objectSpread({}, state, action.videoProps, {\n        hasStarted: false,\n        ended: false\n      });\n\n    case CAN_PLAY:\n      return _objectSpread({}, state, action.videoProps, {\n        waiting: false\n      });\n\n    case WAITING:\n      return _objectSpread({}, state, action.videoProps, {\n        waiting: true\n      });\n\n    case CAN_PLAY_THROUGH:\n    case PLAYING:\n      return _objectSpread({}, state, action.videoProps, {\n        waiting: false\n      });\n\n    case PLAY:\n      return _objectSpread({}, state, action.videoProps, {\n        ended: false,\n        paused: false,\n        autoPaused: false,\n        waiting: false,\n        hasStarted: true\n      });\n\n    case PAUSE:\n      return _objectSpread({}, state, action.videoProps, {\n        paused: true\n      });\n\n    case END:\n      return _objectSpread({}, state, action.videoProps, {\n        ended: true\n      });\n\n    case SEEKING:\n      return _objectSpread({}, state, action.videoProps, {\n        seeking: true\n      });\n\n    case SEEKED:\n      return _objectSpread({}, state, action.videoProps, {\n        seeking: false\n      });\n\n    case ERROR:\n      return _objectSpread({}, state, action.videoProps, {\n        error: 'UNKNOWN ERROR',\n        ended: true\n      });\n\n    case DURATION_CHANGE:\n    case TIME_UPDATE:\n    case VOLUME_CHANGE:\n    case PROGRESS_CHANGE:\n    case RATE_CHANGE:\n    case SUSPEND:\n    case ABORT:\n    case EMPTIED:\n    case STALLED:\n    case LOADED_META_DATA:\n    case LOADED_DATA:\n    case RESIZE:\n      return _objectSpread({}, state, action.videoProps, action.videoProps.paused === false ? {\n        hasStarted: true,\n        waiting: false\n      } : {});\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}